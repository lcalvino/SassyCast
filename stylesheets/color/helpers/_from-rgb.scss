/// Cast a string into a rgb color
/// @access private
/// @param {String} $string - string
/// @return {Color | String} - string or rgb color depending on the match
/// @require {function} _get-color-value
@function _sc-from-rgb($string) {
  $string-lower: to-lower-case($string);
  $frags: ();
  $is-alpha: str-slice($string-lower, 4, 4) == 'a';
  $start: str-index($string, '(');
  $length: str-length($string);

  @for $i from $start through $length {
    $token: str-slice($string-lower, $i, $i);

    @if ($token == ' ') {
      // @continue;
    } @else if ($token == '(' or $token == ',') {
      $frags: append($frags, '');
    } @else if ($token == ')') {
      @if length($frags) != if($is-alpha, 4, 3) {
        @return _sc-throw($string, 'color'); // Parsing error
      }

      $red: _sc-get-color-value(nth($frags, 1));
      $green: _sc-get-color-value(nth($frags, 2));
      $blue: _sc-get-color-value(nth($frags, 3));

      @if (not $red or not $green or not $blue) {
        @return _sc-throw($string, 'color');
      }

      @if $is-alpha {
        @if length($frags) != 4 {
          @return _sc-throw($string, 'color'); // No alpha channel found
        }

        $alpha: _sc-get-color-value(nth($frags, 4));

        @if not $alpha {
          @return _sc-throw($string, 'color'); // Error parsing alpha channel
        }

        @return rgba($red, $green, $blue, $alpha);
      }

      @return rgb($red, $green, $blue);
    } @else {
      $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);
    }
  }

  @return $string;
}
