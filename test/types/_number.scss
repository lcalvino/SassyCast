@include test('to-number(..)') {
  $tests: (
    1: ('value': 1, 'type': 'number'),
    42: ('value': 42, 'type': 'number'),
    -42: ('value': -42, 'type': 'number'),
    -4.2: ('value': -4.2, 'type': 'number'),
    4.2: ('value': 4.2, 'type': 'number'),
    42em: ('value': 42em, 'type': 'number'),
    -42em: ('value': -42em, 'type': 'number'),
    -4.2em: ('value': -4.2em, 'type': 'number'),
    4.2em: ('value': 4.2em, 'type': 'number'),
    '': ('value': 0, 'type': 'number'),
    'string': ('value': 0, 'type': 'number'),
    'this is a string': ('value': 0, 'type': 'number'),
    'true': ('value': 0, 'type': 'number'),
    'false': ('value': 0, 'type': 'number'),
    '0': ('value': 0, 'type': 'number'),
    '-0': ('value': -0, 'type': 'number'),
    '1': ('value': 1, 'type': 'number'),
    '42': ('value': 42, 'type': 'number'),
    '4.2': ('value': 4.2, 'type': 'number'),
    '-42': ('value': -42, 'type': 'number'),
    '-4.2': ('value': -4.2, 'type': 'number'),
    '42em': ('value': 42em, 'type': 'number'),
    '4.2em': ('value': 4.2em, 'type': 'number'),
    '-42em': ('value': -42em, 'type': 'number'),
    '-4.2em': ('value': -4.2em, 'type': 'number'),
    '1px': ('value': 1px, 'type': 'number'),
    '1cm': ('value': 1cm, 'type': 'number'),
    '1mm': ('value': 1mm, 'type': 'number'),
    '1%': ('value': 1%, 'type': 'number'),
    '1ch': ('value': 1ch, 'type': 'number'),
    '1pc': ('value': 1pc, 'type': 'number'),
    '1in': ('value': 1in, 'type': 'number'),
    '1em': ('value': 1em, 'type': 'number'),
    '1rem': ('value': 1rem, 'type': 'number'),
    '1pt': ('value': 1pt, 'type': 'number'),
    '1ex': ('value': 1ex, 'type': 'number'),
    '1vw': ('value': 1vw, 'type': 'number'),
    '1vh': ('value': 1vh, 'type': 'number'),
    '1vmin': ('value': 1vmin, 'type': 'number'),
    '1vmax': ('value': 1vmax, 'type': 'number'),
    '1ms': ('value': 1ms, 'type': 'number'),
    '1s': ('value': 1s, 'type': 'number'),
    '1deg': ('value': 1deg, 'type': 'number'),
    '1rad': ('value': 1rad, 'type': 'number'),
    '1grad': ('value': 1grad, 'type': 'number'),
    '1turn': ('value': 1turn, 'type': 'number'),
    '1Hz': ('value': 1Hz, 'type': 'number'),
    '1kHz': ('value': 1kHz, 'type': 'number'),
    '1dpi': ('value': 1dpi, 'type': 'number'),
    '1dpcm': ('value': 1dpcm, 'type': 'number'),
    '1dppx': ('value': 1dppx, 'type': 'number'),
    '#000': ('value': 0, 'type': 'number'),
    '#000000': ('value': 0, 'type': 'number'),
    'black': ('value': 0, 'type': 'number'),
    'rgb(0,0,0)': ('value': 0, 'type': 'number'),
    'rgba(0,0,0,.5)': ('value': 0, 'type': 'number'),
    'hsl(0,0,0)': ('value': 0, 'type': 'number'),
    'hsla(0,0,0, .5)': ('value': 0, 'type': 'number'),
    #000: ('value': 0, 'type': 'number'),
    #ffffff: ('value': 0, 'type': 'number'),
    red: ('value': 0, 'type': 'number'),
    rgb(10, 20, 30): ('value': 0, 'type': 'number'),
    rgba(30, 20, 10, 0.5): ('value': 0, 'type': 'number'),
    hsl(10, 20, 30): ('value': 0, 'type': 'number'),
    hsla(30, 20, 10, 0.5): ('value': 0, 'type': 'number'),
    true: ('value': 1, 'type': 'number'),
    false: ('value': 0, 'type': 'number'),
    (this, is, a, list): ('value': 0, 'type': 'number'),
    (this is a list): ('value': 0, 'type': 'number'),
    ('a': 1, 'b': 2): ('value': 0, 'type': 'number'),
    null: ('value': 0, 'type': 'number'),
  );

  @each $test, $expect in $tests {
    $actual-value: to-number($test);
    $actual-type: type-of($actual-value);

    $expected-value: map-get($expect, 'value');
    $expected-type: map-get($expect, 'type');

    @include assert-equal($actual-value, $expected-value, 'Cast to number if possible, or return 0.');
    @include assert-equal($actual-type, $expected-type, 'Cast to number if possible, or return 0.');
  }
}
